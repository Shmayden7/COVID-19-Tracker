{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","App.js","index.js","App.module.css","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","images/image.png"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","changeableUrl","axios","get","modifiedData","console","log","fetchDailyData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","event","target","i","key","App","state","fetchedData","setState","this","src","coronaImage","image","alt","React","Component","ReactDom","render","document","getElementById"],"mappings":"0GACAA,EAAOC,QAAU,CAAC,UAAY,yBAAyB,KAAO,oBAAoB,SAAW,wBAAwB,UAAY,yBAAyB,OAAS,wB,4NCgFpJC,EA1ED,SAAC,GAA4D,IAAD,IAAzDC,KAAQC,EAAiD,EAAjDA,UAAWC,EAAsC,EAAtCA,UAAWC,EAA2B,EAA3BA,OAAQC,EAAmB,EAAnBA,WACpD,OAAKH,EAIF,yBAAKI,UAAWC,IAAOC,WACpB,kBAACC,EAAA,EAAD,CAAMD,WAAS,EAACE,QAAS,EAAGC,QAAQ,UACjC,kBAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,UAAWC,IAAMC,GAAI,GAAIC,GAAI,EAAGV,UAAWW,IAAGV,IAAOW,KAAMX,IAAOY,WAC1E,kBAACC,EAAA,EAAD,KACG,kBAACC,EAAA,EAAD,CAAYC,MAAM,gBAAgBC,cAAY,GAA9C,YAGA,kBAACF,EAAA,EAAD,CAAYG,QAAQ,MACjB,kBAAC,IAAD,CACGC,MAAO,EACPC,IAAKxB,EAAUyB,MACfC,SAAU,IACVC,UAAU,OAGhB,kBAACR,EAAA,EAAD,CAAYC,MAAM,iBACd,UAAY,IAAIQ,KAAKzB,GAAY0B,gBAErC,kBAACV,EAAA,EAAD,CAAYG,QAAQ,SAApB,wCAKN,kBAACf,EAAA,EAAD,CAAMG,MAAI,EAACC,UAAWC,IAAMC,GAAI,GAAIC,GAAI,EAAGV,UAAWW,IAAGV,IAAOW,KAAMX,IAAOJ,YAC1E,kBAACiB,EAAA,EAAD,KACG,kBAACC,EAAA,EAAD,CAAYC,MAAM,gBAAgBC,cAAY,GAA9C,aAGA,kBAACF,EAAA,EAAD,CAAYG,QAAQ,MACjB,kBAAC,IAAD,CACGC,MAAO,EACPC,IAAKvB,EAAUwB,MACfC,SAAU,IACVC,UAAU,OAGhB,kBAACR,EAAA,EAAD,CAAYC,MAAM,iBACd,UAAY,IAAIQ,KAAKzB,GAAY0B,gBAErC,kBAACV,EAAA,EAAD,CAAYG,QAAQ,SAApB,wCAKN,kBAACf,EAAA,EAAD,CAAMG,MAAI,EAACC,UAAWC,IAAMC,GAAI,GAAIC,GAAI,EAAGV,UAAWW,IAAGV,IAAOW,KAAMX,IAAOH,SAC1E,kBAACgB,EAAA,EAAD,KACG,kBAACC,EAAA,EAAD,CAAYC,MAAM,gBAAgBC,cAAY,GAA9C,UAGA,kBAACF,EAAA,EAAD,CAAYG,QAAQ,MACjB,kBAAC,IAAD,CACGC,MAAO,EACPC,IAAKtB,EAAOuB,MACZC,SAAU,IACVC,UAAU,OAGhB,kBAACR,EAAA,EAAD,CAAYC,MAAM,iBACd,UAAY,IAAIQ,KAAKzB,GAAY0B,gBAErC,kBAACV,EAAA,EAAD,CAAYG,QAAQ,SAApB,2CA/DL,gB,yBCPPQ,EAAM,iCAECC,EAAS,uCAAG,WAAOC,GAAP,6BAAAC,EAAA,6DAClBC,EAAgBJ,EAEjBE,IACAE,EAAa,UAAMJ,EAAN,sBAAuBE,IAJjB,kBASTG,IAAMC,IAAIF,GATD,2BAQhBnC,KAAQC,EARQ,EAQRA,UAAWC,EARH,EAQGA,UAAWC,EARd,EAQcA,OAAQC,EARtB,EAQsBA,WAGnCkC,EAAe,CAClBrC,UAAWA,EACXC,UAAWA,EACXC,OAAQA,EACRC,WAAYA,GAfI,kBAkBZkC,GAlBY,kCAoBnBC,QAAQC,IAAR,MApBmB,0DAAH,sDAwBTC,EAAc,uCAAG,gCAAAP,EAAA,+EAEDE,IAAMC,IAAN,UAAaN,EAAb,WAFC,uBAEhB/B,EAFgB,EAEhBA,KAEFsC,EAAetC,EAAK0C,KAAI,SAACC,GAAD,MAAgB,CAC3C1C,UAAW0C,EAAU1C,UAAU2C,MAC/BzC,OAAQwC,EAAUxC,OAAOyC,MACzBC,KAAMF,EAAUG,eAPK,kBAUjBR,GAViB,gCAaxBC,QAAQC,IAAR,MAbwB,yDAAH,qDAiBdO,EAAc,uCAAG,8BAAAb,EAAA,+EAEcE,IAAMC,IAAN,UAAaN,EAAb,eAFd,uBAERiB,EAFQ,EAEhBhD,KAAQgD,UAFQ,kBAGjBA,EAAUN,KAAI,SAACT,GAAD,OAAaA,EAAQgB,SAHlB,gCAKxBV,QAAQC,IAAR,MALwB,yDAAH,qD,yBC8BZU,EArED,SAAC,GAAuD,IAAD,IAApDlD,KAAOC,EAA6C,EAA7CA,UAAWC,EAAkC,EAAlCA,UAAWC,EAAuB,EAAvBA,OAAS8B,EAAc,EAAdA,QAAc,EAChCkB,mBAAS,IADuB,mBAC3DR,EAD2D,KAChDS,EADgD,KAGlEC,qBAAU,YAEO,uCAAG,4BAAAnB,EAAA,sEAEUO,IAFV,OAERE,EAFQ,OAIdS,EAAaT,GAJC,2CAAH,qDASZW,KACF,IAIH,IAAMC,EAEFZ,EAAUa,OACN,kBAAC,IAAD,CAAMxD,KAAM,CACRyD,OAAQd,EAAUD,KAAI,qBAAGG,QACzBa,SAAU,CAAC,CACP1D,KAAM2C,EAAUD,KAAI,qBAAGzC,aACvB0D,MAAO,WACPC,YAAa,UACbC,MAAM,GACR,CACD7D,KAAM2C,EAAUD,KAAI,qBAAGvC,UACvBwD,MAAO,SACPC,YAAa,MACbE,gBAAiB,oBACjBD,MAAM,OAGX,KAIFE,EACF9D,EACI,kBAAC,IAAD,CAAKD,KAAM,CACPyD,OAAQ,CAAC,WAAY,YAAa,UAClCC,SAAU,CAAC,CACPC,MAAO,SACPG,gBAAiB,CACb,qBACA,qBACA,sBAEJ9D,KAAM,CAACC,EAAUyB,MAAOxB,EAAUwB,MAAOvB,EAAOuB,UAErDsC,QAAS,CACRC,OAAQ,CAACC,SAAS,GAClBC,MAAO,CAACD,SAAS,EAAME,KAAK,oBAAD,OAAsBnC,OAGrD,KAIR,OACK,yBAAK5B,UAAWC,IAAOC,WAClB0B,EAAU8B,EAAWR,I,mCCvCnBc,EA1BO,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,oBAA0B,EAECnB,mBAAS,IAFV,mBAExCoB,EAFwC,KAEtBC,EAFsB,KAe/C,OAXAnB,qBAAU,YACQ,uCAAG,sBAAAnB,EAAA,kEACbsC,EADa,SACazB,IADb,6EAAH,qDAIdO,KACD,CAACkB,IAMA,kBAACC,EAAA,EAAD,CAAapE,UAAWC,IAAOoE,aAC3B,kBAACC,EAAA,EAAD,CAAcC,aAAa,GAAGC,SAAU,SAACC,GAAD,OAAUR,EAAoBQ,EAAMC,OAAOrD,SAC/E,4BAAQA,MAAM,IAAd,UACC6C,EAAiB7B,KAAI,SAACT,EAAS+C,GAAV,OAClB,4BAAQC,IAAKD,EAAGtD,MAAOO,GAAUA,S,kCCYtCiD,E,4MA7BXC,MAAQ,CACJnF,KAAM,GACNiC,QAAS,I,EAQbqC,oB,uCAAsB,WAAOrC,GAAP,eAAAC,EAAA,sEACQF,EAAUC,GADlB,OACZmD,EADY,OAElB,EAAKC,SAAS,CAACrF,KAAMoF,EAAanD,QAASA,IAFzB,2C,wPAJQD,I,OAApBoD,E,OACNE,KAAKD,SAAS,CAACrF,KAAMoF,I,qIAUhB,IAAD,EACsBE,KAAKH,MAAvBnF,EADJ,EACIA,KAAMiC,EADV,EACUA,QACd,OACI,yBAAK5B,UAAWC,IAAOC,WACnB,yBAAKgF,IAAKC,IAAanF,UAAWC,IAAOmF,MAAOC,IAAI,aACpD,kBAAC,EAAD,CAAO1F,KAAMsF,KAAKH,MAAMnF,OACxB,kBAAC,EAAD,CAAesE,oBAAqBgB,KAAKhB,sBACzC,kBAAC,EAAD,CAAOtE,KAAMA,EAAMiC,QAASA,S,GAzB1B0D,IAAMC,WCHxBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U,mBCJjDnG,EAAOC,QAAU,CAAC,UAAY,uBAAuB,MAAQ,qB,mBCA7DD,EAAOC,QAAU,CAAC,UAAY,2B,mBCA9BD,EAAOC,QAAU,CAAC,YAAc,qC,mBCDhCD,EAAOC,QAAU,IAA0B,mC","file":"static/js/main.58bbbb78.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3bjn6\",\"card\":\"Cards_card__eGUfZ\",\"infected\":\"Cards_infected__-adYp\",\"recovered\":\"Cards_recovered__1aizD\",\"deaths\":\"Cards_deaths__Qdjzq\"};","import React from \"react\";\nimport { Card, CardContent, Typography, Grid } from \"@material-ui/core\";\nimport CountUp from \"react-countup\";\nimport cx from 'classnames';\n\nimport styles from \"./Cards.module.css\";\n\nconst Cards = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\n   if (!confirmed) {\n      return \"Loading.....\";\n   }\n   return (\n      <div className={styles.container}>\n         <Grid container spacing={3} justify='center'>\n            <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.infected)}>\n               <CardContent>\n                  <Typography color='textSecondary' gutterBottom>\n                     Infected\n                  </Typography>\n                  <Typography variant='h5'>\n                     <CountUp\n                        start={0}\n                        end={confirmed.value}\n                        duration={2.5}\n                        separator=','\n                     />\n                  </Typography>\n                  <Typography color='textSecondary'>\n                     {'As Of: ' + new Date(lastUpdate).toDateString()}\n                  </Typography>\n                  <Typography variant='body2'>\n                     Number of active cases of COVID-19\n                  </Typography>\n               </CardContent>\n            </Grid>\n            <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}>\n               <CardContent>\n                  <Typography color='textSecondary' gutterBottom>\n                     Recovered\n                  </Typography>\n                  <Typography variant='h5'>\n                     <CountUp\n                        start={0}\n                        end={recovered.value}\n                        duration={2.5}\n                        separator=','\n                     />\n                  </Typography>\n                  <Typography color='textSecondary'>\n                     {'As Of: ' + new Date(lastUpdate).toDateString()}\n                  </Typography>\n                  <Typography variant='body2'>\n                     Number of recoveries from COVID-19\n                  </Typography>\n               </CardContent>\n            </Grid>\n            <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.deaths)}>\n               <CardContent>\n                  <Typography color='textSecondary' gutterBottom>\n                     Deaths\n                  </Typography>\n                  <Typography variant='h5'>\n                     <CountUp\n                        start={0}\n                        end={deaths.value}\n                        duration={2.5}\n                        separator=','\n                     />\n                  </Typography>\n                  <Typography color='textSecondary'>\n                     {'As Of: ' + new Date(lastUpdate).toDateString()}\n                  </Typography>\n                  <Typography variant='body2'>\n                     Number of deaths caused by COVID-19\n                  </Typography>\n               </CardContent>\n            </Grid>\n         </Grid>\n      </div>\n   );\n};\nexport default Cards;\n","import axios from \"axios\";\n\nconst url = \"https://covid19.mathdro.id/api\";\n\nexport const fetchData = async (country) => {\n   var changeableUrl = url;\n\n   if(country){\n      changeableUrl = `${url}/countries/${country}`;\n   };\n   try {\n      const {\n         data: { confirmed, recovered, deaths, lastUpdate },\n      } = await axios.get(changeableUrl);\n\n      const modifiedData = {\n         confirmed: confirmed,\n         recovered: recovered,\n         deaths: deaths,\n         lastUpdate: lastUpdate,\n      };\n\n      return modifiedData;\n   } catch (error) {\n      console.log(error);\n   }\n};\n\nexport const fetchDailyData = async () => {\n   try {\n      const { data } = await axios.get(`${url}/daily`);\n\n      const modifiedData = data.map((dailyData) => ({\n         confirmed: dailyData.confirmed.total,\n         deaths: dailyData.deaths.total,\n         date: dailyData.reportDate,\n      }))\n\n      return modifiedData;\n\n   } catch (error) {\n      console.log(error);\n   }\n};\n\nexport const fetchCountries = async () => {\n   try {\n      const { data: { countries } } = await axios.get(`${url}/countries`);\n      return countries.map((country) => country.name);\n   } catch (error) {\n      console.log(error);\n   }\n}","import React, { useState, useEffect } from \"react\";\nimport { fetchDailyData } from \"../../api/index\";\nimport { Line, Bar } from \"react-chartjs-2\";\n\nimport styles from \"./Chart.module.css\";\n\nconst Chart = ({ data: {confirmed, recovered, deaths}, country }) => {\n   const [dailyData, setDailyData] = useState([]);\n\n   useEffect(() => {\n      // this will find info from API and setState\n      const fetchAPI = async () => {\n         //finds the data from the API call\n         const dailyData = await fetchDailyData();\n         //sets state\n         setDailyData(dailyData);\n\n\n      };\n        //getting the inner function to call itself\n        fetchAPI();\n   }, []);\n   // the array at the end makes the useEffect behave like \n   // a componentDidMount() and only runs once\n\n   const lineChart = (\n       // this is a conditional, it does the same thing as an if()\n       dailyData.length ? (\n           <Line data={{\n               labels: dailyData.map(({ date }) => date),\n               datasets: [{\n                   data: dailyData.map(({ confirmed }) => confirmed),\n                   label: 'Infected',\n                   borderColor: '#3333ff',\n                   fill: true,\n               },{\n                data: dailyData.map(({ deaths }) => deaths),\n                label: 'Deaths',\n                borderColor: 'red',\n                backgroundColor: 'rgba(255,0,0,0.5)',\n                fill: true,\n               }],\n           }} />\n       ) : null\n   );\n\n\n   const barChart = (\n       confirmed ? (\n           <Bar data={{\n               labels: ['Infected', 'Recovered', 'Deaths'],\n               datasets: [{\n                   label: 'People',\n                   backgroundColor: [\n                       'rgba(0,0,225, 0.5)',\n                       'rgba(0,255,0, 0.5)',\n                       'rgba(255,0,0, 0.5)',\n                   ],\n                   data: [confirmed.value, recovered.value, deaths.value],\n               }]\n           }} options={{\n               legend: {display: false},\n               title: {display: true, text: `Current state in ${country}`},\n\n           }}/> \n       ) : null\n\n   )\n\n   return (\n        <div className={styles.container}>\n            {country ? barChart : lineChart}\n        </div>\n   );\n};\nexport default Chart;\n","import React, { useState, useEffect } from 'react';\nimport { NativeSelect, FormControl } from '@material-ui/core';\nimport { countries, fetchCountries } from '../../api/';\n\nimport styles from './CountryPicker.module.css';\n\nconst CountryPicker = ({ handleCountryChange }) => {\n\n    const [fetchedCountries, setFetchedCountries] = useState([]);\n\n    useEffect(() => {\n        const fetchAPI = async () => {\n            setFetchedCountries(await fetchCountries());\n        }\n\n        fetchAPI();\n    }, [setFetchedCountries]);\n    //the second arg passed will make it so that useEffect will only activate\n    // if setFetchedCountries changes then the entire function will run\n\n\n    return(\n        <FormControl className={styles.formControl}>\n            <NativeSelect defaultValue='' onChange={(event)=> handleCountryChange(event.target.value)}>\n                <option value=''>Global</option>\n                {fetchedCountries.map((country, i) => \n                    <option key={i} value={country}>{country}</option>\n                )}\n            </NativeSelect>\n        </FormControl>\n    )\n}\nexport default CountryPicker;","import React from 'react';\n\nimport {Cards, Chart, CountryPicker} from './components'\nimport {fetchData} from './api/index';\nimport styles from './App.module.css';\n\nimport coronaImage from './images/image.png';\n\nclass App extends React.Component {\n    state = {\n        data: {},\n        country: '',\n    };\n\n    async componentDidMount(){\n        const fetchedData = await fetchData();\n        this.setState({data: fetchedData});\n    };\n\n    handleCountryChange = async (country) => {\n        const fetchedData = await fetchData(country);\n        this.setState({data: fetchedData, country: country});\n        // first fetch the data\n        //then set the state\n    };\n\n    render(){\n        const { data, country } = this.state; \n        return (\n            <div className={styles.container}>\n                <img src={coronaImage} className={styles.image} alt='COVID-19' />\n                <Cards data={this.state.data}/>\n                <CountryPicker handleCountryChange={this.handleCountryChange}/>\n                <Chart data={data} country={country}/>\n            </div>\n        );\n    };\n};\nexport default App;","import React from 'react';\nimport ReactDom from 'react-dom';\n\nimport App from './App';\n\nReactDom.render(<App />, document.getElementById('root'));\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\",\"image\":\"App_image__3byI1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1PIOn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__2p8f9\"};","module.exports = __webpack_public_path__ + \"static/media/image.a4f88d05.png\";"],"sourceRoot":""}